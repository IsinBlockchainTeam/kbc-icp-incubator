type Organization = record { id : nat; name : text; description : text; verifiable_presentation: text };
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : Organization; Err : text };
type Result_2 = variant { Ok : vec record { Organization; Role }; Err : text };
type Result_3 = variant { Ok : text; Err : text };
type Role = variant { Viewer; Editor; Owner };
service : (text) -> {
  add_member : (nat, principal, Role) -> (Result);
  create_organization : (text, text, text) -> (Result_1);
  delete_organization : (nat) -> (Result);
  get_organization : (nat) -> (Result_1) composite_query;
  get_verifiable_presentation: (nat) -> (Result_3) composite_query;
  get_organization_members : (nat) -> (
      vec record { principal; Role },
    ) composite_query;
  get_user_organizations : () -> (Result_2) composite_query;
  remove_member : (nat, principal) -> (Result);
  update_organization : (nat, text, text, text) -> (Result_1);
}
